"use strict";
const cloud_assembly_schema_1 = require("@aws-cdk/cloud-assembly-schema");
const cxapi = require("@aws-cdk/cx-api");
const lib_1 = require("../lib");
const annotations_1 = require("../lib/annotations");
const app_1 = require("../lib/app");
const metadata_resource_1 = require("../lib/private/metadata-resource");
function withApp(props, block) {
    const app = new app_1.App({
        stackTraces: false,
        ...props,
    });
    block(app);
    return app.synth();
}
function synth(context) {
    return withApp({ context }, app => {
        const stack1 = new lib_1.Stack(app, 'stack1', { env: { account: '12345', region: 'us-east-1' } });
        new lib_1.CfnResource(stack1, 's1c1', { type: 'DummyResource', properties: { Prop1: 'Prop1' } });
        const r2 = new lib_1.CfnResource(stack1, 's1c2', { type: 'DummyResource', properties: { Foo: 123 } });
        const stack2 = new lib_1.Stack(app, 'stack2');
        new lib_1.CfnResource(stack2, 's2c1', { type: 'DummyResource', properties: { Prog2: 'Prog2' } });
        const c1 = new MyConstruct(stack2, 's1c2');
        // add some metadata
        stack1.node.addMetadata('meta', 111);
        annotations_1.Annotations.of(r2).addWarning('warning1');
        annotations_1.Annotations.of(r2).addWarning('warning2');
        c1.node.addMetadata('meta', { key: 'value' });
        app.node.addMetadata('applevel', 123); // apps can also have metadata
    });
}
function synthStack(name, includeMetadata = false, context) {
    const response = synth(context);
    const stack = response.getStackByName(name);
    if (!includeMetadata) {
        delete stack.metadata;
    }
    return stack;
}
class MyConstruct extends lib_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        new lib_1.CfnResource(this, 'r1', { type: 'ResourceType1' });
        new lib_1.CfnResource(this, 'r2', { type: 'ResourceType2', properties: { FromContext: this.node.tryGetContext('ctx1') } });
    }
}
function parseModules(x) {
    if (x === undefined) {
        return {};
    }
    const ret = {};
    for (const clause of x.split(',')) {
        const [key, value] = clause.split('=');
        if (key !== undefined && value !== undefined) {
            ret[key] = value;
        }
    }
    return ret;
}
/**
 * Set the CLI_VERSION_ENV environment variable
 *
 * This is necessary to get the Stack to emit the metadata resource
 */
function withCliVersion(block) {
    process.env[cxapi.CLI_VERSION_ENV] = '1.2.3';
    try {
        return block();
    }
    finally {
        delete process.env[cxapi.CLI_VERSION_ENV];
    }
}
module.exports = {
    'synthesizes all stacks and returns synthesis result'(test) {
        const response = synth();
        delete response.dir;
        test.deepEqual(response.stacks.length, 2);
        const stack1 = response.stacks[0];
        test.deepEqual(stack1.stackName, 'stack1');
        test.deepEqual(stack1.id, 'stack1');
        test.deepEqual(stack1.environment.account, 12345);
        test.deepEqual(stack1.environment.region, 'us-east-1');
        test.deepEqual(stack1.environment.name, 'aws://12345/us-east-1');
        test.deepEqual(stack1.template, {
            Resources: {
                s1c1: { Type: 'DummyResource', Properties: { Prop1: 'Prop1' } },
                s1c2: { Type: 'DummyResource', Properties: { Foo: 123 } },
            },
        });
        test.deepEqual(stack1.manifest.metadata, {
            '/stack1': [{ type: 'meta', data: 111 }],
            '/stack1/s1c1': [{ type: 'aws:cdk:logicalId', data: 's1c1' }],
            '/stack1/s1c2': [{ type: 'aws:cdk:logicalId', data: 's1c2' },
                { type: 'aws:cdk:warning', data: 'warning1' },
                { type: 'aws:cdk:warning', data: 'warning2' }],
        });
        const stack2 = response.stacks[1];
        test.deepEqual(stack2.stackName, 'stack2');
        test.deepEqual(stack2.id, 'stack2');
        test.deepEqual(stack2.environment.name, 'aws://unknown-account/unknown-region');
        test.deepEqual(stack2.template, {
            Resources: {
                s2c1: { Type: 'DummyResource', Properties: { Prog2: 'Prog2' } },
                s1c2r1D1791C01: { Type: 'ResourceType1' },
                s1c2r25F685FFF: { Type: 'ResourceType2' },
            },
        });
        test.deepEqual(stack2.manifest.metadata, {
            '/stack2/s2c1': [{ type: 'aws:cdk:logicalId', data: 's2c1' }],
            '/stack2/s1c2': [{ type: 'meta', data: { key: 'value' } }],
            '/stack2/s1c2/r1': [{ type: 'aws:cdk:logicalId', data: 's1c2r1D1791C01' }],
            '/stack2/s1c2/r2': [{ type: 'aws:cdk:logicalId', data: 's1c2r25F685FFF' }],
        });
        test.done();
    },
    'context can be passed through CDK_CONTEXT'(test) {
        process.env[cxapi.CONTEXT_ENV] = JSON.stringify({
            key1: 'val1',
            key2: 'val2',
        });
        const prog = new app_1.App();
        test.deepEqual(prog.node.tryGetContext('key1'), 'val1');
        test.deepEqual(prog.node.tryGetContext('key2'), 'val2');
        test.done();
    },
    'context passed through CDK_CONTEXT has precedence'(test) {
        process.env[cxapi.CONTEXT_ENV] = JSON.stringify({
            key1: 'val1',
            key2: 'val2',
        });
        const prog = new app_1.App({
            context: {
                key1: 'val3',
                key2: 'val4',
            },
        });
        test.deepEqual(prog.node.tryGetContext('key1'), 'val1');
        test.deepEqual(prog.node.tryGetContext('key2'), 'val2');
        test.done();
    },
    'context from the command line can be used when creating the stack'(test) {
        const output = synthStack('stack2', false, { ctx1: 'HELLO' });
        test.deepEqual(output.template, {
            Resources: {
                s2c1: {
                    Type: 'DummyResource',
                    Properties: {
                        Prog2: 'Prog2',
                    },
                },
                s1c2r1D1791C01: {
                    Type: 'ResourceType1',
                },
                s1c2r25F685FFF: {
                    Type: 'ResourceType2',
                    Properties: {
                        FromContext: 'HELLO',
                    },
                },
            },
        });
        test.done();
    },
    'setContext(k,v) can be used to set context programmatically'(test) {
        const prog = new app_1.App({
            context: {
                foo: 'bar',
            },
        });
        test.deepEqual(prog.node.tryGetContext('foo'), 'bar');
        test.done();
    },
    'setContext(k,v) cannot be called after stacks have been added because stacks may use the context'(test) {
        const prog = new app_1.App();
        new lib_1.Stack(prog, 's1');
        test.throws(() => prog.node.setContext('foo', 'bar'));
        test.done();
    },
    'app.synth() performs validation first and if there are errors, it returns the errors'(test) {
        class Child extends lib_1.Construct {
            validate() {
                return [`Error from ${this.node.id}`];
            }
        }
        class Parent extends lib_1.Stack {
        }
        const app = new app_1.App();
        const parent = new Parent(app, 'Parent');
        new Child(parent, 'C1');
        new Child(parent, 'C2');
        test.throws(() => app.synth(), /Validation failed with the following errors/);
        test.done();
    },
    'app.synthesizeStack(stack) will return a list of missing contextual information'(test) {
        class MyStack extends lib_1.Stack {
            constructor(scope, id, props) {
                super(scope, id, props);
                this.reportMissingContext({
                    key: 'missing-context-key',
                    provider: cloud_assembly_schema_1.ContextProvider.AVAILABILITY_ZONE_PROVIDER,
                    props: {
                        account: '12345689012',
                        region: 'ab-north-1',
                    },
                });
                this.reportMissingContext({
                    key: 'missing-context-key-2',
                    provider: cloud_assembly_schema_1.ContextProvider.AVAILABILITY_ZONE_PROVIDER,
                    props: {
                        account: '12345689012',
                        region: 'ab-south-1',
                    },
                });
            }
        }
        const assembly = withApp({}, app => {
            new MyStack(app, 'MyStack');
        });
        test.deepEqual(assembly.manifest.missing, [
            {
                key: 'missing-context-key',
                provider: cloud_assembly_schema_1.ContextProvider.AVAILABILITY_ZONE_PROVIDER,
                props: {
                    account: '12345689012',
                    region: 'ab-north-1',
                },
            },
            {
                key: 'missing-context-key-2',
                provider: cloud_assembly_schema_1.ContextProvider.AVAILABILITY_ZONE_PROVIDER,
                props: {
                    account: '12345689012',
                    region: 'ab-south-1',
                },
            },
        ]);
        test.done();
    },
    /**
     * Runtime library versions are now synthesized into the Stack templates directly
     *
     * The are not emitted into Cloud Assembly metadata anymore
     */
    'runtime library versions are not emitted in asm anymore'(test) {
        const assembly = withApp({ analyticsReporting: true }, app => {
            const stack = new lib_1.Stack(app, 'stack1');
            new lib_1.CfnResource(stack, 'MyResource', { type: 'Resource::Type' });
        });
        test.deepEqual(assembly.runtime, { libraries: {} });
        test.done();
    },
    'runtime library versions'(test) {
        var _a, _b, _c;
        metadata_resource_1.MetadataResource.clearModulesCache();
        const response = withApp({ analyticsReporting: true }, app => {
            const stack = new lib_1.Stack(app, 'stack1');
            new lib_1.CfnResource(stack, 'MyResource', { type: 'Resource::Type' });
        });
        const stackTemplate = response.getStackByName('stack1').template;
        const libs = parseModules((_c = (_b = (_a = stackTemplate.Resources) === null || _a === void 0 ? void 0 : _a.CDKMetadata) === null || _b === void 0 ? void 0 : _b.Properties) === null || _c === void 0 ? void 0 : _c.Modules);
        // eslint-disable-next-line @typescript-eslint/no-require-imports
        const version = require('../package.json').version;
        test.deepEqual(libs['@aws-cdk/core'], version);
        test.deepEqual(libs['@aws-cdk/cx-api'], version);
        test.deepEqual(libs['jsii-runtime'], `node.js/${process.version}`);
        test.done();
    },
    'CDK version'(test) {
        metadata_resource_1.MetadataResource.clearModulesCache();
        withCliVersion(() => {
            var _a, _b, _c;
            const response = withApp({ analyticsReporting: true }, app => {
                const stack = new lib_1.Stack(app, 'stack1');
                new lib_1.CfnResource(stack, 'MyResource', { type: 'Resource::Type' });
            });
            const stackTemplate = response.getStackByName('stack1').template;
            const libs = parseModules((_c = (_b = (_a = stackTemplate.Resources) === null || _a === void 0 ? void 0 : _a.CDKMetadata) === null || _b === void 0 ? void 0 : _b.Properties) === null || _c === void 0 ? void 0 : _c.Modules);
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            test.deepEqual(libs['aws-cdk'], '1.2.3');
        });
        test.done();
    },
    'jsii-runtime version loaded from JSII_AGENT'(test) {
        process.env.JSII_AGENT = 'Java/1.2.3.4';
        metadata_resource_1.MetadataResource.clearModulesCache();
        withCliVersion(() => {
            var _a, _b, _c;
            const response = withApp({ analyticsReporting: true }, app => {
                const stack = new lib_1.Stack(app, 'stack1');
                new lib_1.CfnResource(stack, 'MyResource', { type: 'Resource::Type' });
            });
            const stackTemplate = response.getStackByName('stack1').template;
            const libs = parseModules((_c = (_b = (_a = stackTemplate.Resources) === null || _a === void 0 ? void 0 : _a.CDKMetadata) === null || _b === void 0 ? void 0 : _b.Properties) === null || _c === void 0 ? void 0 : _c.Modules);
            test.deepEqual(libs['jsii-runtime'], 'Java/1.2.3.4');
        });
        delete process.env.JSII_AGENT;
        test.done();
    },
    'version reporting includes only @aws-cdk, aws-cdk and jsii libraries'(test) {
        var _a, _b, _c;
        metadata_resource_1.MetadataResource.clearModulesCache();
        const response = withApp({ analyticsReporting: true }, app => {
            const stack = new lib_1.Stack(app, 'stack1');
            new lib_1.CfnResource(stack, 'MyResource', { type: 'Resource::Type' });
        });
        const stackTemplate = response.getStackByName('stack1').template;
        const libs = parseModules((_c = (_b = (_a = stackTemplate.Resources) === null || _a === void 0 ? void 0 : _a.CDKMetadata) === null || _b === void 0 ? void 0 : _b.Properties) === null || _c === void 0 ? void 0 : _c.Modules);
        const libNames = Object.keys(libs).sort();
        test.deepEqual(libNames, [
            '@aws-cdk/cloud-assembly-schema',
            '@aws-cdk/core',
            '@aws-cdk/cx-api',
            '@aws-cdk/region-info',
            'jsii-runtime',
        ]);
        test.done();
    },
    'deep stack is shown and synthesized properly'(test) {
        // WHEN
        const response = withApp({}, (app) => {
            const topStack = new lib_1.Stack(app, 'Stack');
            const topResource = new lib_1.CfnResource(topStack, 'Res', { type: 'CDK::TopStack::Resource' });
            const bottomStack = new lib_1.Stack(topResource, 'Stack');
            new lib_1.CfnResource(bottomStack, 'Res', { type: 'CDK::BottomStack::Resource' });
        });
        // THEN
        test.deepEqual(response.stacks.map(s => ({ name: s.stackName, template: s.template })), [
            {
                name: 'Stack',
                template: { Resources: { Res: { Type: 'CDK::TopStack::Resource' } } },
            },
            {
                name: 'StackResStack7E4AFA86',
                template: { Resources: { Res: { Type: 'CDK::BottomStack::Resource' } } },
            },
        ]);
        test.done();
    },
    'stacks are written to the assembly file in a topological order'(test) {
        // WHEN
        const assembly = withApp({}, (app) => {
            const stackC = new lib_1.Stack(app, 'StackC');
            const stackD = new lib_1.Stack(app, 'StackD');
            const stackA = new lib_1.Stack(app, 'StackA');
            const stackB = new lib_1.Stack(app, 'StackB');
            // Create the following dependency order:
            // A ->
            //      C -> D
            // B ->
            stackC.addDependency(stackA);
            stackC.addDependency(stackB);
            stackD.addDependency(stackC);
        });
        // THEN
        const artifactsIds = assembly.artifacts.map(a => a.id);
        test.ok(artifactsIds.indexOf('StackA') < artifactsIds.indexOf('StackC'));
        test.ok(artifactsIds.indexOf('StackB') < artifactsIds.indexOf('StackC'));
        test.ok(artifactsIds.indexOf('StackC') < artifactsIds.indexOf('StackD'));
        test.done();
    },
    'application support any type in context'(test) {
        const app = new app_1.App({
            context: {
                isString: 'string',
                isNumber: 10,
                isObject: { isString: 'string', isNumber: 10 },
            },
        });
        test.ok(app.node.tryGetContext('isString') === 'string');
        test.ok(app.node.tryGetContext('isNumber') === 10);
        test.deepEqual(app.node.tryGetContext('isObject'), { isString: 'string', isNumber: 10 });
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,